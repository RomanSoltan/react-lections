import ColorPicker from "./components/ColorPicker/ColorPicker";
import Counter from "./components/Counter/Counter";
import TodoList from "./components/TodoList/TodoList";

function App() {
  return (
    <div>
      <h1>State</h1>
      <Counter />
      <ColorPicker />
      <TodoList />
    </div>
  );
}

export default App;

/** Підсумки
 *    1. Дізнались, що таке onClick. Немає стандартних  eventListener,
 * вони не використовуються, лише в деяких умовах. Подивимось, як
 * eventListener додається в React, але це погана практика і краще
 * цього не робити. Якщо ми хочемо додати подію кліка ми пишемо onClick,
 * куди передаємо коллбек, який може бути переданий статично(інлайново),
 * та може бути переданий динамічно як посилання на функцію, якщо
 * багато коду і потрібно передати якусь умову
 *    2. state - це хук, який дозволяє нам зберігати значення і
 * оновлювати їх. Оновлення значеннь викликає рендер компонента, тобто
 * ми в момент оновлення перемальовуємо все, що було в компоненті. Це
 * відбувається миттєво і не викликає зайвих проблем і ресурсів, і
 * працює геніально просто. Цей стейт може бути абсолютно різним і
 * числом, і рядком, і функцією, і обєктом, і масивом, і булем, все,
 * що ви придумаєте. Стейт повертає нам дві сутості: 1. саме значення
 * 2. функція для зміни цього значення. Потрібно використовувати
 * prev у функції, яка змінює значення стейта, що дає нам гарантію, що
 * наша логіка виконається правильно. prev завжди ссилається на актуальне
 * значення стейта
 *    3. Також ми побачили, що є можливість навішуваи події по map().
 * Тобто у нас є масив оюєктів, який ми ітеруємо через map і на кожній
 * ітерації навішуємо onClick, якоїсь функції. Цей onClick запамятовує
 * свої значення. На кожній ітерації елемент буде мати свій окремй колір.
 *    4. У todoList є стейт, він має бути диамічним. Ми навчилися
 * видаляти елементи за фільтрацією по id, з допомогою методу filter().
 * Це універсальний метод видалення будь-чого. Ми маємо записати новий
 * масив і передати його у функцію, яка змінює значення стейту, після
 * чого нове значення перезапише старе. Суть React в тому, щоб
 * перезапистати в стейт нове значення, створювали щось нове, не
 * мутували старе, а створювали щось нове.
 *    5. Для того, щоб додавати елементи ми використовуємо інпут. В
 * інпут людина може ввести щось, і це щось треба зберігати. Для цього
 * створено новий стейт, в якому зберігаємо рядок. В інпуті є
 * можливість робити onChange, в який автоматично приймається event,
 * в якого є target, в якого є value. І сам event ми переписуємо у стейт.
 * Коли нам це знадобиться, ми витягнемо дані, які ввів user зі
 * стейту і використаємо його, після чого очистимо стейт. Щоб інпут
 * очистився потрібно value додати до нашого інпута
 */
